@mixin mq($mq-breakpoint, $mq-breakpoints: $breakpoints) {
  // If $mq-breakpoint is a key that exists in
  // $mq-breakpoints, get and use the value
  @if map-has-key($mq-breakpoints, $mq-breakpoint) {
    $mq-breakpoint: map-get($mq-breakpoints, $mq-breakpoint);
  } @else {
    @error "Property #{$mq-breakpoint} must be one of these: mobile, tablet, desktop.";
  }

  @media screen and (min-width: #{$mq-breakpoint}) {
    @content;
  }
}

@mixin generateCSSPropertyWithColor($property, $prefix, $colors) {
  @each $colorName, $color in $colors {
    .#{$prefix}-#{$colorName} {
      #{$property}: $color;
    }
  }
}

@mixin generateCardClasses() {
  @each $cardType, $cardColor in $cardTypes {
    .card--#{$cardType}.card {
      border-color: map-get($colors, '#{$cardColor}800');
    }
    @each $tagType in $tagTypes {
      @if $tagType == default {
        .card--#{$cardType}-#{$tagType}.card__tag {
          color: map-get($colors, '#{$cardColor}100');
          background-color: map-get($colors, '#{$cardColor}800');
        }
      } @else if $tagType == minor {
        .card--#{$cardType}-#{$tagType}.card__tag {
          color: map-get($colors, '#{$cardColor}800');
          background-color: map-get($colors, '#{$cardColor}100');
        }
      } @else {
        .card--#{$cardType}-#{$tagType}.card__tag {
          color: map-get($colors, '#{$cardColor}800');
          border: 1px solid map-get($colors, '#{$cardColor}800');
          display: grid;
          align-content: center;
        }
      }
    }
  }
}
